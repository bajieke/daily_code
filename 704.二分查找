//二刷

/*

//暴力算法

class Solution {

public:

    int search(vector<int>& nums, int target) {

        if(nums.size() == 0) return false;

        

        for(int i = 0; i < nums.size(); i++) {

            if(nums[i] == target) {

                return i;

            }

        }

        

        return -1;

    }

};

*/

/*

//二分查找－升序数组

//左闭右闭区间

class Solution {

public:

    int search(vector<int>& nums, int target) {

        int i = 0;

        int j = nums.size() - 1;

        

        while(i <= j) {

            int middle = (i + j) / 2;

            //int m = i /2 + j / 2;

            

            if(target > nums[middle]) {

                i = middle + 1;

            }

            else if(target < nums[middle]) {

                j = middle -1;

            }

            else {

                return middle;

            }

        }

        

        return -1;

    }

};

*/

//二分查找－升序数组

//左闭右开区间

class Solution {

public:

    int search(vector<int>& nums, int target) {

        int i = 0;

        int j = nums.size();

        

        while(i < j) {

            //int middle = (i + j) / 2;

            //int middle = i / 2 + j / 2;

            

           //这个效率最高

            int middle = i + ((j - i) >> 1);

            

            if(target > nums[middle]) {

                i = middle + 1;

            }

            else if(target < nums[middle]) {

                j = middle;

            }

            else {

                return middle;

            }

        }

        

        return -1;

    }

};

    

        
